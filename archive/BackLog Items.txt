**** Priority ****

*** OFFERED ITEMS ***
- SEPARATE OFFERED ITEMS INTO LIVESTOCK AND PRODUCE DUE TO FRONT END HAVING DIFFERENT SUBMIT PAGES ** COMPLETE **
    - UPDATE FUNCTION FOR ADD ITEM TO ADD LIVESTOCK BY USER ID ** COMPLETE **
    - ADD FUNCTION FOR ADD PRODUCE BY USER ID ** COMPLETE **
- ADD OFFERED ITEM BY USER ID AS ADMINISTRATOR ** FUTURE MAYBE?
- SETTING INITIAL STATUS AT PENDING APPROVAL

*** USERS ***
- FIGURE OUT AUTHORIZATION (GOOGLE OATH?)
    THIS IS TIED TO IS_PRODUCER, IS_ADMIN, IS_OTHER BOOLEAN FIELDS IN USER TABLE
- FIGURE OUT HOW TO MANAGE SESSIONS WITH TOKENS
- REFACTOR CODE TO ACCOMODATE TOKENS

**** COMPLETED ITEMS ****

*** OFFERED ITEMS ***

- GET ALL OFFERED ITEMS (ADMIN SIDE) ** COMPLETE **
- GET OFFERED ITEMS DETAIL BY OFFERED ITEM ID (ADMIN SIDE) ** COMPLETE **
- UPDATE STATUS OF OFFERED ITEM BY OFFERED ITEM ID (ADMIN SIDE) ** COMPLETE **
- UPDATE DETAILS OF OFFERED ITEMS BY OFFERED ITEM ID (ADMIN) ** COMPLETE **

- GET ALL OFFERED ITEMS BY USER ID (PRODUCER SIDE) ** COMPLETE **
- ADD OFFERED ITEMS BY USER ID (PRODUCER SIDE) ** COMPLETE **
- GET OFFERED ITEM DETAILS BY OFFERED ITEM ID (PRODUCER) ** COMPLETE **
- UPDATE DETAILS OF OFFERED ITEMS BY OFFERED ITEM ID (PRODUCER) ** COMPLETE **

** MAINTENANCE
- UPDATE README FOR BACKEND (WINDOWS, MAC, LINUX) ** COMPLETE **

*** SAMPLE QUERY BELOW *** 

cur.execute(f'SELECT * FROM offered_item where user_id = {id};')
    # select statement will need to be refactored
    # sql statement from node file is as follows:
    # `SELECT OFFERED_ITEM.*, STATUS_TRACKER.*, R_STATUS.STATUS_NAME \
    # FROM OFFERED_ITEM \
    # FULL JOIN STATUS_TRACKER \
    # ON OFFERED_ITEM.ID = STATUS_TRACKER.OFFER_ID \
    # INNER JOIN R_STATUS \
    # ON STATUS_TRACKER.STATUS_ID = R_STATUS.ID \
    # WHERE USER_ID = ${user_id} \
    # AND END_DATE IS NULL;
    # above is not for MVP but will be required to keep history of offered items and status

